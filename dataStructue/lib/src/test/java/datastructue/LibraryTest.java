/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package datastructue;

import datastructue.Queue.Queue;
import datastructue.Stack.Stack;
import org.junit.jupiter.api.Test;

import java.util.EmptyStackException;
import java.util.NoSuchElementException;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test
    public void testPushSingleValueInStack() {
        Stack<Integer> stack = new Stack<>();

        stack.push(1);
        assertEquals("Stack { 1 }", stack.toString());
    }

    @Test
    public void testPushMultipleValuesInStack() {
        Stack<Integer> stack = new Stack<>();

        stack.push(1);
        stack.push(2);
        stack.push(3);
        assertEquals("Stack { 3 -> 2 -> 1 }", stack.toString());
    }




    @Test
    public void testPopSingleValueInStack() {
        Stack<Integer> stack = new Stack<>();

        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.pop();


        assertEquals("Stack { 2 -> 1 }", stack.toString());
    }


    @Test
    public void testPopMultibleValueInStack (){
        Stack stack=new Stack<>();

        stack.push(1);
        stack.push(2);
        stack.push(3);
        stack.pop();
        stack.pop();
        stack.pop();
        assertTrue(stack.isEmpty());
    }

    @Test
    public void testPeekValueInStack (){
        Stack stack=new Stack<>();

        stack.push(1);
        stack.push(2);
        stack.push(3);

        assertEquals(3,stack.peek());
    }


    @Test
    public void testIsEmptyInStack (){
        Stack stack=new Stack<>();

        assertTrue(stack.isEmpty());
    }


    @Test
    public void testPeekOnEmptyStackRaisesException() {
        Stack<Integer> stack = new Stack<>();

        assertThrows(EmptyStackException.class, stack::peek);
    }


    @Test
    public void testEnqueueSingleValueInQueue (){
        Queue queue =new Queue<>();

        queue.enqueue(1);
        assertEquals("Queue { 1 }",queue.toString());
    }

    @Test
    public void testEnqueueMultibleValueInQueue (){
        Queue queue =new Queue<>();

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        assertEquals("Queue { 1 -> 2 -> 3 }",queue.toString());
    }

    @Test
    public void testDequeueSingleValueInQueue (){
        Queue queue =new Queue<>();

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.dequeue();
        assertEquals("Queue { 2 -> 3 }",queue.toString());
    }

    @Test
    public void testDequeueMultibleValueInQueue (){
        Queue queue =new Queue<>();

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.dequeue();
        queue.dequeue();
        queue.dequeue();
        assertTrue(queue.isEmpty());
    }

    @Test
    public void testPeekValueInQueue (){
        Queue queue =new Queue<>();

        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);

        assertEquals(1,queue.peek());
    }


    @Test
    public void testIsEmptyInQueue (){
        Queue queue =new Queue<>();

        assertTrue(queue.isEmpty());
    }


    @Test
    public void testPeekOnEmptyQueueRaisesException() {
        Queue<Integer> queue = new Queue<>();

        assertThrows(NoSuchElementException.class, queue::peek);
    }
}
