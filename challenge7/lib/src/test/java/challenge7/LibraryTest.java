/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge7;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {





    @Test void KgreaterthanLengthTest(){
        //arrange

        LinkedListKth listKth =new LinkedListKth();
        //act
        listKth.append(1);
        listKth.append(2);
        listKth.append(3);
        listKth.append(4);
        listKth.append(5);

        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
            listKth.findKthValue(6);
        });

        assertEquals("k is greater than the length of the list", exception.getMessage());
    }
    @Test void kSameLengthTest (){
        //arrange

        LinkedListKth listKth =new LinkedListKth();
        //act
        listKth.append(1);
        listKth.append(2);
        listKth.append(3);
        listKth.append(4);
        listKth.append(5);

        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
            listKth.findKthValue(5);
        });
        //assert
        assertEquals("k is greater than the length of the list", exception.getMessage());
    }
    @Test void kNegativeTest (){
        //arrange

        LinkedListKth listKth =new LinkedListKth();
        //act
        listKth.append(1);
        listKth.append(2);
        listKth.append(3);
        listKth.append(4);
        listKth.append(5);

        Throwable exception = assertThrows(IllegalArgumentException.class, () -> {
             listKth.findKthValue(-1);
        });

        assertEquals("k is Negative", exception.getMessage());
    }

    @Test void kInMiddle (){
        //arrange

        LinkedListKth listKth =new LinkedListKth();
        //act
        listKth.append(1);
        listKth.append(2);
        listKth.append(3);
        listKth.append(4);
        listKth.append(5);


        int result = listKth.findKthValue(3);

        //assert
        assertEquals(2, result);
    }

    @Test void sizeOneTest (){
        //arrange

        LinkedListKth listKth =new LinkedListKth();
        //act
        listKth.append(4);


        int result = listKth.findKthValue(0);

        //assert
        assertEquals(4, result);
    }

}
