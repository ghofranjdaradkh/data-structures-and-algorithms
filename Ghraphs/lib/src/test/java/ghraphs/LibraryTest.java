/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghraphs;


import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void testAddVertex() {
       Graphs graph=new Graphs();
        Vertex vertex = graph.addVertex(5);
        assertEquals(1, graph.size());
        assertTrue(graph.getVertices().contains(vertex));
    }

    @Test
    public void testAddEdge() {
        Graphs graph=new Graphs();
        Vertex vertex1 = graph.addVertex(3);
        Vertex vertex2 = graph.addVertex(4);
        graph.addEdge(vertex1, vertex2, 5);
        assertEquals(1, graph.getNeighbors(vertex1).size());
        assertEquals(5, graph.getNeighbors(vertex1).iterator().next());
    }

    @Test
    public void testGetVertices() {
        Graphs graph=new Graphs();
        graph.addVertex(10);
        graph.addVertex(20);
        assertEquals(2, graph.getVertices().size());
    }

    @Test
    public void testGetNeighbors() {
        Graphs graph=new Graphs();
        Vertex vertex1 = graph.addVertex(1);
        Vertex vertex2 = graph.addVertex(2);
        graph.addEdge(vertex1, vertex2, 5);
        assertEquals(1, graph.getNeighbors(vertex1).size());

    }
    @Test
    public void testGetNeighborsWithWeight() {
        Graphs graph=new Graphs();
        Vertex vertex1 = graph.addVertex(1);
        Vertex vertex2 = graph.addVertex(2);
        graph.addEdge(vertex1, vertex2, 4);


        assertEquals(1, graph.getNeighbors(vertex1).size());

    }

    @Test
    public void testSize() {
        Graphs graph=new Graphs();
        graph.addVertex(7);
        graph.addVertex(8);
        graph.addVertex(9);
        graph.addVertex(10);
        assertEquals(4, graph.size());
    }

    @Test
    public void testSingleVertexAndEdge() {
        Graphs graph=new Graphs();
        Vertex vertex = graph.addVertex(1);
        assertEquals(1, graph.size());

        Vertex neighbor = graph.addVertex(2);
        graph.addEdge(vertex, neighbor, 3);


        assertEquals(2, graph.size());
        assertTrue(graph.getVertices().contains(vertex));
        assertTrue(graph.getVertices().contains(neighbor));

        assertEquals(1, graph.getNeighbors(vertex).size());

    }
    @Test
    public void testBreadthFirstTraversal() {
   
        Graphs<Integer> graph = new Graphs<>();
        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);
        Vertex<Integer> vertex4 = graph.addVertex(4);

        graph.addEdge(vertex1, vertex2, 5);
        graph.addEdge(vertex1, vertex3, 3);
        graph.addEdge(vertex1, vertex4, 6);


        graph.breadthFirst(vertex1);
        assertEquals(4, graph.size());
        assertTrue(graph.getVertices().contains(vertex1));
        assertEquals(3, graph.getNeighbors(vertex1).size());
    }


}
