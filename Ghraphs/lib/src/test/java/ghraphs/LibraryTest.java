/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghraphs;


import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {

    @Test
    public void testAddVertex() {
       Graphs graph=new Graphs();
        Vertex vertex = graph.addVertex(5);
        assertEquals(1, graph.size());
        assertTrue(graph.getVertices().contains(vertex));
    }

    @Test
    public void testAddEdge() {
        Graphs graph = new Graphs();
        Vertex vertex1 = graph.addVertex(3);
        Vertex vertex2 = graph.addVertex(4);
        graph.addEdge(vertex1, vertex2, 5);

        Collection<Edge<Integer>> neighbors = graph.getNeighbors(vertex1);
        assertEquals(1, neighbors.size());

        Iterator<Edge<Integer>> iterator = neighbors.iterator();
        assertTrue(iterator.hasNext());

        Edge<Integer> edge = iterator.next();
        assertEquals(5, edge.getWeight());
    }


    @Test
    public void testGetVertices() {
        Graphs graph=new Graphs();
        graph.addVertex(10);
        graph.addVertex(20);
        assertEquals(2, graph.getVertices().size());
    }

    @Test
    public void testGetNeighbors() {
        Graphs graph=new Graphs();
        Vertex vertex1 = graph.addVertex(1);
        Vertex vertex2 = graph.addVertex(2);
        graph.addEdge(vertex1, vertex2, 5);
        assertEquals(1, graph.getNeighbors(vertex1).size());

    }
    @Test
    public void testGetNeighborsWithWeight() {
        Graphs graph=new Graphs();
        Vertex vertex1 = graph.addVertex(1);
        Vertex vertex2 = graph.addVertex(2);
        graph.addEdge(vertex1, vertex2, 4);


        assertEquals(1, graph.getNeighbors(vertex1).size());

    }

    @Test
    public void testSize() {
        Graphs graph=new Graphs();
        graph.addVertex(7);
        graph.addVertex(8);
        graph.addVertex(9);
        graph.addVertex(10);
        assertEquals(4, graph.size());
    }

    @Test
    public void testSingleVertexAndEdge() {
        Graphs graph=new Graphs();
        Vertex vertex = graph.addVertex(1);
        assertEquals(1, graph.size());

        Vertex neighbor = graph.addVertex(2);
        graph.addEdge(vertex, neighbor, 3);


        assertEquals(2, graph.size());
        assertTrue(graph.getVertices().contains(vertex));
        assertTrue(graph.getVertices().contains(neighbor));

        assertEquals(1, graph.getNeighbors(vertex).size());

    }
    @Test
    public void testBreadthFirstTraversal() {

        Graphs<Integer> graph = new Graphs<>();
        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);
        Vertex<Integer> vertex4 = graph.addVertex(4);
        Vertex<Integer> vertex5 = graph.addVertex(5);

        graph.addEdge(vertex1, vertex2, 0);
        graph.addEdge(vertex1, vertex3, 0);
        graph.addEdge(vertex2, vertex4, 0);
        graph.addEdge(vertex3, vertex5, 0);


        List<Vertex<Integer>> result = graph.breadthFirst(vertex1);


        List<Vertex<Integer>> expectedOrder = Arrays.asList(vertex1, vertex2, vertex3, vertex4, vertex5);
        assertEquals(expectedOrder, result);
    }
    @Test
    public void testBreadthFirstTraversalWithDisconnectedGraph() {

        Graphs<Integer> graph = new Graphs<>();
        Vertex<Integer> vertex1 = graph.addVertex(1);
        Vertex<Integer> vertex2 = graph.addVertex(2);
        Vertex<Integer> vertex3 = graph.addVertex(3);
        Vertex<Integer> vertex4 = graph.addVertex(4);

        graph.addEdge(vertex1, vertex2, 0);
        graph.addEdge(vertex3, vertex4, 0);

        List<Vertex<Integer>> result = graph.breadthFirst(vertex1);


        List<Vertex<Integer>> expectedOrder = Arrays.asList(vertex1, vertex2);
        assertEquals(expectedOrder, result);
    }


    @Test
    public void testBreadthFirstTraversalWithLargeConnectedGraph() {

        Graphs<String> graph = new Graphs<>();
        Vertex<String> vertexA = graph.addVertex("A");
        Vertex<String> vertexB = graph.addVertex("B");
        Vertex<String> vertexC = graph.addVertex("C");
        Vertex<String> vertexD = graph.addVertex("D");
        Vertex<String> vertexE = graph.addVertex("E");
        Vertex<String> vertexF = graph.addVertex("F");
        Vertex<String> vertexG = graph.addVertex("G");

        graph.addEdge(vertexA, vertexB, 1);
        graph.addEdge(vertexA, vertexC, 2);
        graph.addEdge(vertexB, vertexD, 3);
        graph.addEdge(vertexB, vertexE, 4);
        graph.addEdge(vertexC, vertexF, 5);
        graph.addEdge(vertexC, vertexG, 6);

        // Perform breadth-first traversal starting from vertexA
        List<Vertex<String>> result = graph.breadthFirst(vertexA);

        // Verify the result
        List<Vertex<String>> expectedOrder = Arrays.asList(vertexA, vertexB, vertexC, vertexD, vertexE, vertexF, vertexG);
        assertEquals(expectedOrder, result);
    }

}
